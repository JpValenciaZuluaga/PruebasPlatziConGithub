
KEYPAD_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf6  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077d  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cb  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000538  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002306  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 38 01 	call	0x270	; 0x270 <main>
  9e:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <KEYPAD_init>:


void KEYPAD_init(void)
{
	
	DDRBbits.DDRB0 = 1;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	84 b9       	out	0x04, r24	; 4
	DDRBbits.DDRB1 = 1;
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	84 b9       	out	0x04, r24	; 4
	DDRBbits.DDRB2 = 1;
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	84 b9       	out	0x04, r24	; 4
	DDRBbits.DDRB3 = 1;
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	84 b9       	out	0x04, r24	; 4
	
	DDRCbits.DDRC0 = 0;
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	87 b9       	out	0x07, r24	; 7
	DDRCbits.DDRC1 = 0;
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	87 b9       	out	0x07, r24	; 7
	DDRCbits.DDRC2 = 0;
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	87 b9       	out	0x07, r24	; 7
	DDRCbits.DDRC3 = 0;
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	87 b9       	out	0x07, r24	; 7
	
	PORTCbits.PC0_ = 1;
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	88 b9       	out	0x08, r24	; 8
	PORTCbits.PC1_ = 1;
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	88 b9       	out	0x08, r24	; 8
	PORTCbits.PC2_ = 1;
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	88 b9       	out	0x08, r24	; 8
	PORTCbits.PC3_ = 1;
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	08 95       	ret

000000f0 <COLUMNA_scan>:
}

uint8_t COLUMNA_scan(void)
{

	if(COLUMNA1 == 0)
  f0:	30 99       	sbic	0x06, 0	; 6
  f2:	09 c0       	rjmp	.+18     	; 0x106 <COLUMNA_scan+0x16>
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
  f4:	30 9b       	sbis	0x06, 0	; 6
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <COLUMNA_scan+0x4>
  f8:	31 9b       	sbis	0x06, 1	; 6
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <COLUMNA_scan+0x4>
  fc:	32 9b       	sbis	0x06, 2	; 6
  fe:	fa cf       	rjmp	.-12     	; 0xf4 <COLUMNA_scan+0x4>
 100:	33 9b       	sbis	0x06, 3	; 6
 102:	f8 cf       	rjmp	.-16     	; 0xf4 <COLUMNA_scan+0x4>
 104:	31 c0       	rjmp	.+98     	; 0x168 <COLUMNA_scan+0x78>
		return 1;
	}
	contador++;
 106:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	
	if(COLUMNA2 == 0)
 110:	31 99       	sbic	0x06, 1	; 6
 112:	09 c0       	rjmp	.+18     	; 0x126 <COLUMNA_scan+0x36>
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
 114:	30 9b       	sbis	0x06, 0	; 6
 116:	fe cf       	rjmp	.-4      	; 0x114 <COLUMNA_scan+0x24>
 118:	31 9b       	sbis	0x06, 1	; 6
 11a:	fc cf       	rjmp	.-8      	; 0x114 <COLUMNA_scan+0x24>
 11c:	32 9b       	sbis	0x06, 2	; 6
 11e:	fa cf       	rjmp	.-12     	; 0x114 <COLUMNA_scan+0x24>
 120:	33 9b       	sbis	0x06, 3	; 6
 122:	f8 cf       	rjmp	.-16     	; 0x114 <COLUMNA_scan+0x24>
 124:	23 c0       	rjmp	.+70     	; 0x16c <COLUMNA_scan+0x7c>
		return 1;
	}
	contador++;
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	
	if(COLUMNA3 == 0)
 12c:	32 99       	sbic	0x06, 2	; 6
 12e:	09 c0       	rjmp	.+18     	; 0x142 <COLUMNA_scan+0x52>
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
 130:	30 9b       	sbis	0x06, 0	; 6
 132:	fe cf       	rjmp	.-4      	; 0x130 <COLUMNA_scan+0x40>
 134:	31 9b       	sbis	0x06, 1	; 6
 136:	fc cf       	rjmp	.-8      	; 0x130 <COLUMNA_scan+0x40>
 138:	32 9b       	sbis	0x06, 2	; 6
 13a:	fa cf       	rjmp	.-12     	; 0x130 <COLUMNA_scan+0x40>
 13c:	33 9b       	sbis	0x06, 3	; 6
 13e:	f8 cf       	rjmp	.-16     	; 0x130 <COLUMNA_scan+0x40>
 140:	17 c0       	rjmp	.+46     	; 0x170 <COLUMNA_scan+0x80>
		return 1;
	}
	contador++;
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	
	if(COLUMNA4 == 0)
 148:	33 99       	sbic	0x06, 3	; 6
 14a:	09 c0       	rjmp	.+18     	; 0x15e <COLUMNA_scan+0x6e>
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
 14c:	30 9b       	sbis	0x06, 0	; 6
 14e:	fe cf       	rjmp	.-4      	; 0x14c <COLUMNA_scan+0x5c>
 150:	31 9b       	sbis	0x06, 1	; 6
 152:	fc cf       	rjmp	.-8      	; 0x14c <COLUMNA_scan+0x5c>
 154:	32 9b       	sbis	0x06, 2	; 6
 156:	fa cf       	rjmp	.-12     	; 0x14c <COLUMNA_scan+0x5c>
 158:	33 9b       	sbis	0x06, 3	; 6
 15a:	f8 cf       	rjmp	.-16     	; 0x14c <COLUMNA_scan+0x5c>
 15c:	0b c0       	rjmp	.+22     	; 0x174 <COLUMNA_scan+0x84>
		return 1;
	}
	contador++;
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	
	return 0;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret
{

	if(COLUMNA1 == 0)
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
		return 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret
	contador++;
	
	if(COLUMNA2 == 0)
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
		return 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	08 95       	ret
	contador++;
	
	if(COLUMNA3 == 0)
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
		return 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
	contador++;
	
	if(COLUMNA4 == 0)
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
		return 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
	}
	contador++;
	
	return 0;
	
}
 176:	08 95       	ret

00000178 <FILA_init>:


void FILA_init(uint8_t fila)
{
	FILA1 = 1;
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	91 60       	ori	r25, 0x01	; 1
 17c:	95 b9       	out	0x05, r25	; 5
	FILA2 = 1;
 17e:	95 b1       	in	r25, 0x05	; 5
 180:	92 60       	ori	r25, 0x02	; 2
 182:	95 b9       	out	0x05, r25	; 5
	FILA3 = 1;
 184:	95 b1       	in	r25, 0x05	; 5
 186:	94 60       	ori	r25, 0x04	; 4
 188:	95 b9       	out	0x05, r25	; 5
	FILA4 = 1;
 18a:	95 b1       	in	r25, 0x05	; 5
 18c:	98 60       	ori	r25, 0x08	; 8
 18e:	95 b9       	out	0x05, r25	; 5
	
	switch(fila)
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	69 f0       	breq	.+26     	; 0x1ae <FILA_init+0x36>
 194:	18 f4       	brcc	.+6      	; 0x19c <FILA_init+0x24>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	31 f0       	breq	.+12     	; 0x1a6 <FILA_init+0x2e>
 19a:	14 c0       	rjmp	.+40     	; 0x1c4 <FILA_init+0x4c>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	59 f0       	breq	.+22     	; 0x1b6 <FILA_init+0x3e>
 1a0:	84 30       	cpi	r24, 0x04	; 4
 1a2:	69 f0       	breq	.+26     	; 0x1be <FILA_init+0x46>
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <FILA_init+0x4c>
	{ 
		case 1: FILA1 = 0; break;
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	8e 7f       	andi	r24, 0xFE	; 254
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <FILA_init+0x4c>
		case 2: FILA2 = 0; break;
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <FILA_init+0x4c>
		case 3: FILA3 = 0; break;
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	8b 7f       	andi	r24, 0xFB	; 251
 1ba:	85 b9       	out	0x05, r24	; 5
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <FILA_init+0x4c>
		case 4: FILA4 = 0; break;
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	85 b9       	out	0x05, r24	; 5
	}
	asm("NOP");	
 1c4:	00 00       	nop
 1c6:	08 95       	ret

000001c8 <KEYPAD_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8f e3       	ldi	r24, 0x3F	; 63
 1ca:	9c e9       	ldi	r25, 0x9C	; 156
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <KEYPAD_read+0x4>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <KEYPAD_read+0xa>
 1d2:	00 00       	nop
}

uint8_t KEYPAD_read(void)
{
	_delay_ms(10);
	contador= 0;
 1d4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	
	//Barrido de fila1
	FILA_init(1);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 bc 00 	call	0x178	; 0x178 <FILA_init>
	if(COLUMNA_scan())
 1de:	0e 94 78 00 	call	0xf0	; 0xf0 <COLUMNA_scan>
 1e2:	88 23       	and	r24, r24
 1e4:	39 f0       	breq	.+14     	; 0x1f4 <KEYPAD_read+0x2c>
		return tabla[contador];
 1e6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e0 50       	subi	r30, 0x00	; 0
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	80 81       	ld	r24, Z
 1f2:	08 95       	ret

	//Barrido de fila2
	FILA_init(2);
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 bc 00 	call	0x178	; 0x178 <FILA_init>
	if(COLUMNA_scan())
 1fa:	0e 94 78 00 	call	0xf0	; 0xf0 <COLUMNA_scan>
 1fe:	88 23       	and	r24, r24
 200:	39 f0       	breq	.+14     	; 0x210 <KEYPAD_read+0x48>
		return tabla[contador];
 202:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e0 50       	subi	r30, 0x00	; 0
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	80 81       	ld	r24, Z
 20e:	08 95       	ret
	
	//Barrido de fila3
	FILA_init(3);
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	0e 94 bc 00 	call	0x178	; 0x178 <FILA_init>
	
	if(COLUMNA_scan())
 216:	0e 94 78 00 	call	0xf0	; 0xf0 <COLUMNA_scan>
 21a:	88 23       	and	r24, r24
 21c:	39 f0       	breq	.+14     	; 0x22c <KEYPAD_read+0x64>
		return tabla[contador];
 21e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	e0 50       	subi	r30, 0x00	; 0
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	80 81       	ld	r24, Z
 22a:	08 95       	ret

	//Barrido de fila4
	FILA_init(4);
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	0e 94 bc 00 	call	0x178	; 0x178 <FILA_init>
	if(COLUMNA_scan()){
 232:	0e 94 78 00 	call	0xf0	; 0xf0 <COLUMNA_scan>
 236:	88 23       	and	r24, r24
 238:	31 f0       	breq	.+12     	; 0x246 <KEYPAD_read+0x7e>
		return tabla[contador];
 23a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	e0 50       	subi	r30, 0x00	; 0
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	80 81       	ld	r24, Z
	}
	return 0;
	
}
 246:	08 95       	ret

00000248 <ascii_to_int4>:
uint8_t ascii_to_int4(char c)  //convierte el valor que llega de la tabla en ascii y lo pasa a un numero de 4 bits 
{
	if (c >= '0' && c <= '9') {
 248:	90 ed       	ldi	r25, 0xD0	; 208
 24a:	98 0f       	add	r25, r24
 24c:	9a 30       	cpi	r25, 0x0A	; 10
 24e:	60 f0       	brcs	.+24     	; 0x268 <ascii_to_int4+0x20>
		return (c - '0');
		} else if (c >= 'A' && c <= 'F') {
 250:	9f eb       	ldi	r25, 0xBF	; 191
 252:	98 0f       	add	r25, r24
 254:	96 30       	cpi	r25, 0x06	; 6
 256:	10 f4       	brcc	.+4      	; 0x25c <ascii_to_int4+0x14>
		return (c - 'A' + 10);
 258:	87 53       	subi	r24, 0x37	; 55
 25a:	08 95       	ret
		} else if (c >= 'a' && c <= 'f') {
 25c:	9f e9       	ldi	r25, 0x9F	; 159
 25e:	98 0f       	add	r25, r24
 260:	96 30       	cpi	r25, 0x06	; 6
 262:	20 f4       	brcc	.+8      	; 0x26c <ascii_to_int4+0x24>
		return (c - 'a' + 10);
 264:	87 55       	subi	r24, 0x57	; 87
 266:	08 95       	ret
	
}
uint8_t ascii_to_int4(char c)  //convierte el valor que llega de la tabla en ascii y lo pasa a un numero de 4 bits 
{
	if (c >= '0' && c <= '9') {
		return (c - '0');
 268:	89 2f       	mov	r24, r25
 26a:	08 95       	ret
		} else if (c >= 'A' && c <= 'F') {
		return (c - 'A' + 10);
		} else if (c >= 'a' && c <= 'f') {
		return (c - 'a' + 10);
		} else {
		return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 26e:	08 95       	ret

00000270 <main>:

int main(void)
{	DDRD = 0xFF;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	8a b9       	out	0x0a, r24	; 10
	
	

	
	KEYPAD_init();
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <KEYPAD_init>
	

    
    while (1) 
    {	uint8_t dato = KEYPAD_read();
 278:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <KEYPAD_read>
		
		if (dato != 0)
 27c:	88 23       	and	r24, r24
 27e:	e1 f3       	breq	.-8      	; 0x278 <main+0x8>
			
			PORTD = ascii_to_int4(dato);
 280:	0e 94 24 01 	call	0x248	; 0x248 <ascii_to_int4>
 284:	8b b9       	out	0x0b, r24	; 11
 286:	f8 cf       	rjmp	.-16     	; 0x278 <main+0x8>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
